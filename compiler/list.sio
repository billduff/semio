module List (*: LIST*) = mod
  type t elt =
    | Nil
    | Cons of elt * t elt

  type list elt = t elt

  fun fold { f = f, init = init, list } =
    match list with
    | Nil => init
    | Cons { x, xs } =>
      fold { f = f, init = f { init, x }, xs }
    end

  val fold_left = fold

  fun fold_right { f = f, init = init, list = list } =
    match list with
    | Nil => init
    | Cons { x, xs } =>
      f { x, fold_right { f = f, init = init, list = xs } }
    end

  fun map { f = f, list } =
    match list with
    | Nil => Nil
    | Cons { x, xs } => Cons { f x, map { f = f, xs } }
    end

  fun find_map { pred = pred, list = list } =
    match list with
    | Nil => None
    | Cons { x, xs } =>
      match pred x with
      | Some x => Some x
      | None => find_map { pred = pred, list = xs }
      end
    end

  (* CR wduff: Hack until exceptions exist. *)
  fun failwith s = let val {} = print s in failwith s end

  fun map2_exn { list1 = list1, list2 = list2, f = f } =
    match { list1, list2 } with
    | { Nil, Nil } => Nil
    | { Cons {x, xs}, Cons {y, ys} } =>
      Cons { f { x, y }, map2_exn { list1 = xs, list2 = ys, f = f}}
    | _ => failwith ""
    end

(*
  fun iter (f : (b * a) -> b) (z : b) (l : list a) : list b * b =
    match l with
    | Nil => (Cons(z, Nil), z)
    | Cons (x, xs) =>
      let
        val (partials, result) = iter f z xs
      in
        (Cons (z, map (fn (y : b) => f (y, x) end) partials), f (x, result))
      end
    end

  fun iteri (f : (a * b) -> b) (z : b) (l : list a) : list b =
    let
      val (partials, result) = iter f z l
    in
      append (drop 1 partials) (Cons(result, Nil))
    end

  val rev = fold_left Cons Nil

  fun flatten (l : list list a)  =
    match l with
    | Nil => Nil
    | Cons(Nil, xs) => flatten xs
    | Cons(Cons(y,ys), xs) => Cons(y, flatten (Cons(ys, xs)))
    end

  (* Create Lists *)
  fun tabulate' (f : int -> a) (size : int) : list a =
    match size with
    | 0 => Nil
    | n => Cons(f n, tabulate f (n - 1))
    end

  fun tabulate (f : int -> a) (size : int) : list a =
    rev (tabulate' f size)

  fun repeat (x : a) (size :int) : list a =
    tabulate (fn (_ : a) => x end) size

  (* If n > length(l), split l n == (l, Nil)
   * If n < 0, split l n == (Nil, l)
   * If 0 <= n <= length(l), split l n == (l1,l2) where length(l1) == n, l = append l1 l2
   *)
  fun split (l : list a) (n : int) =
    match (l, n <= 0) with
    | (_, True) => (Nil, l)
    | (Cons(x, xs), False) =>
      let
        val (front : list a, back : list a) = split xs (n-1)
      in
        (Cons(x,front), back)
      end
    | (Nil, False) =>  (Nil, Nil)
    end

   fun take (l : list a) (n : int) = let val (front, _) = split l n in front end
   fun drop (l : list a) (n : int) = let val (_,  back) = split l n in back end

   fun sublist (l : list a) (start : int) (len : int) =
     let
       val (_,temp) = split l start
     in
       take temp len
     end

   (* Return the sublist of l from idx front to idx back inclusive *)
   fun sublistIdx (l : list a) (front : int) (back : int) : list a =
     sublist l (back - front + 1)

   fun split_size (n : int) (l : list a) : list list a=
    let
      val (front, back) = split n l
    in
      match back with
      | Nil => Cons(front, Nil)
      | Cons(_, _) => Cons(front, split_size n back)
      end
    end

    (* REQUIRES : n > 0
     * ENSURES : split_piecs n l == L where
     *  flatten L == l,  length L == n
     *  all elements of L differ in length by less than 1
     * Note: the begining lists have an extra element until it divides evenely
     *)
    fun split_pieces (n : int) (l : list a) : list list a =
      match n with
      | 1 => Cons(l, Nil)
      | _ =>
        let
          val (front, back) = split (length l div_ceil n) l
        in
          Cons(front, split_pieces (n-1) back)
        end
      end

  (* Asking about lists *)
  val length = fold_left (+) 0

    fun null (l : list a) : bool =
      match l with
      | Nil => True
      | Cons(_, _) => False
      end

    fun filter (p : a -> bool) (l : list a) : list a =
      match l with
      | Nil => Nil
      | Cons(x, xs) =>
        match p x with
        | True => Cons(x, filter p xs)
        | False => filter p xs
        end
      end

    fun filterMap (p : a -> option b) (l : list a) : list a =
      match l with
      | Nil => True
      | Cons(x, xs) =>
        match p x with
        | Some y => Cons(y, filterMap p xs)
        | None => filterMap p xs
        end
      end

    fun exists (p : a -> bool) : list a -> bool =
       fold_left (fn (acc, hd) => p hd or acc) False

    fun all (p : a -> bool) : list a -> bool =
       fold_left (fn (acc, hd) => p hd and acc) True

    fun find (p : a -> bool) (l : list a) : option a =
      match l with
      | Nil => None
      | Cons (x, xs) =>
        match p x with
        | true => Some x
        | false => None
        end
      end

   fun rfind (p : a -> bool) (l : list a) : option a =
     find p (rev l)

   fun mem (eq : a * a -> bool) (x : a) (l : list a) : bool =
     is_some (find (fn y => eq(x,y)) l)

   fun delete (eq : a * a -> bool) (x : a) (l : list a) : list a =
     match l with
     | Nil => Nil
     | Cons(y, ys) =>
       match eq (x, y) with
       | True => ys
       | False => Cons(x, delete eq x ys)
       end
     end

   fun delete_all (eq : a * a -> bool) (y : a) (l : list a) : list a=
     filter (curry eq y) l

   fun index_of (p : a -> bool) (l : list a) : option int =
     Option.map (fn (i, _) => i) (match find (apply_snd p) (enum l))

   fun index_mem (eq : a * a -> bool) (x : a) (l : list a) : bool =
      Option.map (fn (i, _) => i) (match find (apply_snd (curry eq x)) (enum l))

   fun to_string (f : a -> string) (l : list a) : string =
     fold_left (fn (acc, x) => f x ^ acc end) "" l

   fun unique (eq : list a) (l : list a) : list a =
     match l with
     | Nil => Nil
     | Cons(x, xs) => Cons(x, unique (delete_all eq x xs))
     end

  (* Pairs of list stuff *)

  fun append (l1 : list a) (l2 : list a) : list a =
    fold_right Cons l2 l1

  (* interleave l1 l2 returns a new list alternating between
   * elements of l1 and l2 (starting with l1) until either list runs out elements.
   * When either list runs out of elements the remaining elements
   *   are added to the end of the returned list in order
   *)
  fun interleave (l1 : list a) (l2 : list a) : list a =
    match (l1, l2) with
    | (Nil, _) => l2
    | (_, Nil) => l1
    | (Cons(x,xs), Cons(y, ys)) => Cons(x, Cons(y, interleave xs ys))
    end

  (* List Pair Stuff *)
  fun zip (l1 : list a) (l2 : list b) : list (a * b) =
    match (l1, l2) with
    | (Nil, _) => Nil
    | (_, Nil) => Nil
    | (Cons(x,xs), Cons(y, ys)) => Cons((x, y), interleave xs ys)
    end

  fun map2 (f : a * b -> c) (l1 : list a) (l2 : list b) : list c =
    map f (zip l1 l2)

  fun enum (l : list a) : list (int * a) =
    zip (tabulate (fn (i : int) => i) (length l)) l

  fun cartesian_product (l1 : list a) (l2 : list b) : list (a * b) =
   flatten (map (fn x => map (fn y => (x,y) end) l2) l1)

  (* Lexographically compares l1 and l2 with cmp ordering the elements *)
  fun compare (cmp : a * a -> order) (l1 : list a) (l2 : list a) : order
      match (l1, l2) with
      | (Nil, Nil) => Equal
      | (Cons(_, _), Nil) => Greater
      | (Nil, Cons(_, _)) => Less
      | (Cons(x, xs), Cons(y, ys)) =>
        match cmp (x, y) with
        | Equal => compare cmp xs ys
        | ord => ord
        end
      end

  fun equal (eq: (a * a) -> bool) (l1 : list a, l2 : list a) : bool =
    Int.equal(length l1, length l2)
    and all eq (zip l1 l2)

  (* REQUIRES: l1, l2 cmp sorted
   * ENSURES: merge cmp l1 l2 returns a sorted permuation of append l1 l2
   *)
  fun merge (cmp : a * a -> order) (l1 : list a) (l2 : list a) : list a =
    match (l1, l2) with
    | (Nil, _) => l2
    | (Cons(_, _) , Nil) => l1
    | (Cons(x, xs), Cons(y, ys) =>
      match cmp (x,y) with
      | Less => Cons(x, merge cmp xs l2)
      | Equal => Cons(x, Cons(y, merge cmp xs ys))
      | Greater => Cons(y, merge cmp l1 ys)
      end
    end

  (* REQUIRES: l1, l2 cmp sorted
   * ENSURES: merge cmp l1 l2 returns a sorted permuation of append l1 l2
   *)
  fun merge_unique (cmp : a * a -> order) (l1 : list a) (l2 : list a) : list a =
    match (l1, l2) with
    | (Nil, _) => l2
    | (Cons(_, _) , Nil) => l1
    | (Cons(x, xs), Cons(y, ys) =>
      match cmp (x,y) with
      | Less => Cons(x, merge cmp xs l2)
      | Equal => Cons(x,  merge cmp xs ys)
      | Greater => Cons(y, merge cmp l1 ys)
      end
    end

  (* REQUIRES: l is a cmp sorted list
   * ENSURES: insert cmp l a returns a sorted permuation of Cons(x, l)
   *)
  fun insert (cmp : a * a -> order) (l : list a) (x : a) =
    merge cmp (Cons (x, Nil)) l

  fun sort (cmp : a * a -> order) (l : list a) =
    match l with
    | Nil => l
    | Cons(x, xs) => l
    | Cons(_, Cons(_, _)) =>
      let
        val (fst, snd) = split l (length l / 2)
      in
        merge cmp (sort fst) (sort snd)
      end
    end

  fun sort_unique (cmp : a * a -> order) (l : list a) =
        match l with
    | Nil => l
    | Cons(x, xs) => l
    | Cons(_, Cons(_, _)) =>
      let
        val (fst, snd) = split l (length l / 2)
      in
        merge_unique cmp (sort_unique fst) (sort_unique snd)
      end
    end

  (* REQUIRES: acc is a reverse-cmp sorted list
   * ENSURES:  Returns the n smallest elements of l.
   *   If length l < n returns all of l
   *   If n <=0 returns Nil
   *)
  (* SLOW *)
  fun min_n_acc (cmp : a * a -> order) (n : int) (l : list a) (acc : list a) =
    match l with
    | Nil => acc
    | Cons(x, xs) =>
      match (length acc < n, acc) with
      | (true, _) => min_n_acc cmp n xs (insert (Order.reverse cmp) x acc)
      | (false, Nil) => acc
      | (false, Cons(threshhold, found)) =>
        match cmp (x, threshhold) with
        | Less => min_n_acc cmp n xs (insert (Order.reverse cmp) x found)
        | Equal => min_n_acc cmp n xs (insert (Order.reverse cmp) x found)
        | Greater => min_n_acc cmp n xs acc
        end
      end
    end

  (* Returns the n smallest elements of l.
   *   If length l < n returns all of l
   *   If n <=0 returns Nil
   *)
  fun min_n (cmp : a * a -> order) (n : int) (l : list a) =
    min_n_acc cmp n Nil

  (* Returns None if list is empty *)
  fun min_max (cmp : a * a -> order) (l : list a) : option a =
    match l with
    | Nil => None
    | Cons(x, xs) => fold_left (Order.min xO Order.max) x xs
    end

  fun min (cmp : a * a -> order) (l : list a) : option a =
    match l with
    | Nil => None
    | Cons(x, xs) => fold_left Order.min x xs
    end

  fun max (cmp : a * a -> order) (l : list a) : option a =
    match l with
    | Nil => None
    | Cons(x, xs) => fold_left (Order.max cmp) x xs
    end
*)
end

type list a = List.t a
