module Optional (*: OPTION*) = mod
  type t a = optional a

  fun return x = Some x

  fun bind { t = t, f = f } =
    match t with
    | None => None
    | Some x => f x
    end

  fun all list =
    match l with
    | List.Nil => Some List.Nil
    | List.Cons { opt = opt, l' = l' } =>
      match opt with
      | None => None
      | Some value =>
        match all l' with
        | None => None
        | Some l'' => Some (List.Cons { value, l'' })
        end
      end
    end
end
